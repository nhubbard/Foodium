/*
 * MIT License
 *
 * Copyright (c) 2020 Shreyas Patil
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package dev.shreyaspatil.foodium.utils

import android.animation.Animator
import android.animation.AnimatorListenerAdapter
import android.app.Activity
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import android.view.LayoutInflater
import android.view.View
import android.view.ViewPropertyAnimator
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.app.ShareCompat
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import androidx.viewbinding.ViewBinding
import com.jakewharton.retrofit2.converter.kotlinx.serialization.asConverterFactory
import dev.shreyaspatil.MaterialDialog.MaterialDialog
import dev.shreyaspatil.foodium.data.repository.NetworkBoundRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.json.Json
import okhttp3.MediaType.Companion.toMediaType
import retrofit2.Response
import retrofit2.Retrofit

/**
 * Create a database migration with a lambda.
 *
 * @param from The previous version.
 * @param to The new version.
 * @param migrator The function, passed the [SupportSQLiteDatabase] instance, that migrates the
 * existing data to the new database version.
 * @return The [Migration] generated by calling this function.
 */
inline fun migration(
    from: Int,
    to: Int,
    crossinline migrator: (SupportSQLiteDatabase) -> Unit
) = object : Migration(from, to) {
    override fun migrate(database: SupportSQLiteDatabase) = migrator.invoke(database)
}

/**
 * Create a Room database.
 *
 * @param context The context to create the database with.
 * @param name The name of the database.
 * @param extras Any extra actions to add to the database.
 * @return A built instance of [T].
 */
inline fun <reified T : RoomDatabase> database(
    context: Context,
    name: String,
    crossinline extras: RoomDatabase.Builder<T>.() -> Unit
): T = Room.databaseBuilder(
    context,
    T::class.java,
    name
).apply(extras).build()

/**
 * Create a [NetworkBoundRepository] as a [Flow].
 *
 * @param save The save function.
 * @param fetchLocal The fetchFromLocal function.
 * @param fetchRemote The fetchFromRemote function.
 */
fun <T, U> networkRepo(
    save: suspend (U) -> Unit,
    fetchLocal: () -> Flow<T>,
    fetchRemote: suspend () -> Response<U>
) = object : NetworkBoundRepository<T, U>() {
    override suspend fun saveRemoteData(response: U) = save.invoke(response)
    override fun fetchFromLocal(): Flow<T> = fetchLocal.invoke()
    override suspend fun fetchFromRemote(): Response<U> = fetchRemote.invoke()
}.asFlow()

/**
 * Build a [Retrofit] instance.
 */
inline fun <reified T> retrofit(crossinline block: Retrofit.Builder.() -> Unit): T =
    Retrofit.Builder().apply(block).build().create(T::class.java)

@ExperimentalSerializationApi
fun Retrofit.Builder.serialization() {
    val contentType = "application/json".toMediaType()
    addConverterFactory(Json.asConverterFactory(contentType))
}

inline fun <reified T> intent(context: Context, crossinline block: Intent.() -> Unit): Intent =
    Intent(context, T::class.java).apply(block)

inline fun Activity.startChooser(crossinline block: ShareCompat.IntentBuilder.() -> Unit): Intent =
    Intent.createChooser(
        ShareCompat.IntentBuilder(this).apply(block).intent, null
    )

fun AppCompatActivity.uiMode(): Int {
    return if ((resources.configuration.uiMode and Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_NO) {
        AppCompatDelegate.MODE_NIGHT_YES
    } else {
        AppCompatDelegate.MODE_NIGHT_AUTO_BATTERY
    }
}

inline fun AppCompatActivity.dialog(crossinline block: MaterialDialog.Builder.() -> Unit) {
    MaterialDialog.Builder(this).apply(block).build().show()
}

inline fun <T : ViewBinding> AppCompatActivity.viewBinding(crossinline bindingInflater: (LayoutInflater) -> T) =
    lazy(LazyThreadSafetyMode.NONE) { bindingInflater.invoke(layoutInflater) }

inline fun View.animate(crossinline block: ViewPropertyAnimator.() -> Unit) {
    animate().apply(block)
}

inline fun ViewPropertyAnimator.onEnd(crossinline block: (Animator) -> Unit) {
    setListener(object : AnimatorListenerAdapter() {
        override fun onAnimationEnd(animation: Animator) {
            block(animation)
        }
    })
}